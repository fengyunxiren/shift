#使用自动多对多并发的高性能、高可靠性的文件传输工具
**简介**：`Shift`是一个高性能的本地远端文件传输的轻量级框架脚本，它拥有应对各种错误的复原能力。Shift支持多种文件传输协议，可以自动为参与传输的主机的每一部分选择最合适的机制以适应具有不同软件和网络访问限制的异构客户端。通过从客户端和服务端采集文件系统信息以检测文件系统的等价性和能否路径重写，这样可以使客户端根据负载和可用性自动并发完成将单个或多个文件传输到多个服务器上。通过消除单点的故障，可以同时提升文件传输的性能和可靠性，突破了单一系统的瓶颈。通过哈希密码表保证端对端的完整性，在出错的时候只需将错误的部分重传。本文描述了`Shift`设计和应用方法以及提升文件传输性能和可靠性的设计细节。
##1 介绍
在高端计算环境下，从计算资源里远程传输大数据文件是非常常见的事情，由于用户分布在不同的组织中，需要将输入数据传入计算机进行处理，然后将输出数据传回进行进一步分析。当新的文件系统上线或者现存的文件系统存储失衡时，管理员需要优化资源配置，这时，同样的数据在本地不同的文件系统传输也会变得非常频繁。在以上情况中，文件从资源端传到目的端都需要经过许多器件，在这之中，有非常多的机会来优化传输性能，它与你犯错误的机会一样多。我们工作的重点是研发自动的、高性能的、高可靠性的、简单易用、容易部署支持以上两种传输的工具。
目前已经存在许多提供高稳定性和（或者）高性能的文件传输工具，但是大多数都不支持本地的文件传输，需要特殊的安全模式和或者传输工具，不方便个人用户的部署，而且没有优化到最佳性能。本文介绍了`Shift`传输工具，一个全新的文件传输框架：*S*elf-*H*ealing *I*ndependent *F*ile *T*ransfers。`Shift`通过运用各种技术，提供了一个高性能、高适应性的本地和远端的文件传输方法。这些技术包括通过哈希密码保持端对端的完整性，传输限制以防止计算机资源被耗尽，基于负载和可用性，让传输资源达到平衡。此外，`Shift`给广大用户的操作环境做了最小的假设，为适应各种异构环境，`Shift`做了特殊设计。`Shift`在文件传输的可靠性和自动的单个或多个文件的并行传输上比任何其它命令行传输应用都要优越，同时也非常方便个人用户或者团队部署。
`Shift`包含一个客户端和一个管理组件。图1展示了文件传输系统组件的基本位置顺序，一个单一的文件传输可能包含许多不同的文件操作，如创建目录，复制文件，修改属性，计算校验码等，初始客户端执行操作包括给出传输文件以及将它们在管理端初始化。这个客户端与其它客户端动态连接，然后像管理端请求一系列的操作，并试着完成这些操作，并将结果返回给管理端，客户端会根据可行性，性能和当前系统特性利用不同的应用完成文件操作。本文后面会详细讨论文件的传输过程。
`Shift`的核心依赖`Perl`语言和直接或间接利用如`SSH`公共秘钥等非交互式身份验证的`SSH`来访问远程端.客户端不需要提供`SSH`访问，但是，如果这样，`Shift`的并发特性将不可用。`Shift`同时支持手动设置密钥对和单点登陆`SSH`。客户端首先用一个轻量级的身份验证和授权框架`Mesh`进行测试，`Mesh`提供利用`SSH`密钥对进行单点登陆的方法。通过少量修改临时处理凭证，客户端便可支持其它的身份验证框架如`GSI`。
本文结构如下，第二部分展示相关的工作，第三部分和第四部分介绍`Shift`的管理端和客户端，第五部分详细描述传输时的并发和负载平衡，最后一部分为总结和下一步工作计划。
##2 相关工作
`cp`和`scp`分别是本地和远程文件传输的标准方法。然而也存在许多其它的文件传输工具，能够提供更好的性能和（或者）可到性。`BbFTP`是一个支持多种`TCP`流的远程文件传输工具，它能够配置缓冲区的大小以提高文件传输的性能，同时有一个简单的重试机制来保证传输的可靠性。`Rsync`同时支持本地和远程传输，可以通过部分传输同步资源端和目的地端的文件，它通过最小化传输文件，提升了传输性能，同时通过纠错机制提高了文件传输的可靠性。`GridFTP`实现了`BbFTP`和`Rsync`大部分功能，并且由更容易配置的试错机制，还额外增加了提升性能的传输方法如基于`UDP`的数据流和在多台服务器之间的数据传输。Mcp是一个高性能的本地复制工具，支持多线程的单个或多个文件的复制，它支持多节点，双缓冲，以及集成了并行的哈希运算。在可行的情况下，`Shift`可以利用以上任何一种工具来提升性能。
许多工具通过修改现存的传输工具来提升性能和（或者）可靠性。`Lim`用包含`GridFTP`的`Naradabrokering`作为一种更可靠的通信媒介。`Sultanate`等通过在文件后面添加数字签名来检测在`FTP`传输中文件坏点出现的位置。如果坏点位置检测出来，只需要重新传输该文件的一小部分。然而，由于需要同时修改客户端和服务端的软件，这个工具部署起来比较困难。`HPN-SSH`是`OpenSSH`的一个增强版本，通过实现动态调整`SSH`服务端和多线程运行`AES-CRT`秘钥使得传输性能得到了大幅度提升，`HPN-SSH`需要通过修改客户端和服务器端来达到最佳性能，两端的修改都不会影响`SSH`的兼容性。
其它的工具（包括`Shift`）利用现存的传输工具来构建模块来提升性能。`Globus Toolkit`的文件可靠性传输服务`RFT`通过增加第三方包`GRidFTP`从中央服务器发起传输来提升传输的可靠性。`RFT`最初的设计只支持单点错误排查。`Basney`和`Duda`通过运行多个`RFT`实例来提供在故障以及`RFT`同步传输时的容错能力。`gLite File Transfer Service`（FTS）是一个构建在`GrdeFTP`和`RFT`上的可靠的文件传输服务。`FTS`跟踪和监视第三方基于低层次服务的所有文件操作。
`RFT`和`FTS`提升了传输工具的弹性，它们用的第三方传输工具对许多机构的安全模式来说，都不适合。`Stork`是一个类似与`Shift`的可靠的数据移动框架。它提供本地传输，在多任务情况下的自动选择能力和保证端对端完整性的功能。`Stork`需要`GSI`认证服务的长时间运行，然而这样的要求对个人部署并不实际，甚至对一个机构来说都比较难实现。
当文件副本存在时，文件资源的传输将会失败。复制管理服务如`Reptor`能够方便追踪一个文件的多个传输副本，能提供数据冗余以及对特定文件资源进行优化。`Replica Avare RFT`是`RFT`的一个扩展，它在单文件传输中运用多个复制管理服务来提升容错能力。点对点网络文件传输协议如`BitTorrent`提供类似功能，在客户端可以为一个文件建立多个数据流来最大化低宽带环境下的网络资源利用率，并且支持哈希运算来检验文件的完整性。`GridFTP`结合点对点传输功能和`GridFTP`的传输速度来实现高性能的文件共享。因为个人用户的数据和（或者）已经在本地文件系统里的数据并不会大量的复制到其它地方，所以，`Shift`更专注于为一个文件创建更多的访问端口，而不是寻找更多的同样资源。
##3 Shift管理
`Shift`提供一个轻量的命令行管理工具，通过了两个基本函数方便了对文件操作的集中追踪，这两个函数将在下文介绍。`Put()`函数可以为任务添加操作或者修改以存在的操作，`get()`函数可以检索任务的操作。管理器在图1中用虚线标示出来，它可以部署在任意一台客户端上。配置远端主机或者配置一台专门用来存储冗余数据的主机，或者仅仅配置一台独立的主机取决与个人用户或者是机构的需求。除了跟踪以外，管理器还提供文件的传输状态，用户可以手动查询或者通过邮件自动获取。
`Shift`使用日志结构的平面文件模型来存储追踪数据，它将对其它组件如数据的依赖性降到最低，从而降低了复杂度和减少了故障发生的可能。追踪数据中的每一行都记载了一个文件操作的类型（如`cp`，`mkdir`等），参数，发起操作的源主机，运行时间，文件大小，状态和一个日志消息。文件操作的状态被`put()`函数添加在日志文件中，状态包括以下五个，*do/doing/redo/done/error*。同一个操作可以出现在多个日志文件中，也可以在一个日志文件中出现多次，但是存储的成本由操作的次数和重新配置的可能性控制。这个模型中`put()`函数的时间复杂度为O(1)，并且通过数据重写最大程度的减少了因为断电和故障导致的损失。
每个小的元数据文件为文件传输记录的项目中记录了如使用者在log文件中最后一次使用的位置，每个状态操作的个数量等，通过`get()`函数就可以检索到如do/redo在记录中最后出现的位置，并且可以知道下个文件操作是什么。表1给出了`put()`和`get()`函数不同更新规模下的时间消耗，当操作数量到十亿级别时，时间成本会非常高，但这在实际情况种不会遇到，因为这会降低检查故障点的有效性。`get()`函数比`put()`函数的时间花费要高，这是因为在执行`get()`函数时会进行一系列的高级运算，这将会在第五部分详细描述。在没有共享的文件系统的冗余管理配置中，跟踪数据必须保持同，这个可以通过标准的机制来实现，如`Rsync`通过获取管理器的可配置的同步标记来实现。表2展示了`Rsync`通过`put()`从不同的数量的现存操作中添加不同数量文件操作所花费的时间。可以看出即使在十亿级别的数量，操作所花费的时间也比较小。
##4  Shift的客户端
用户与`Shift`交互的客户端由一个轻量级的命令行客户端实现，它的使用方法和`cp`、`scp`基本一样，并实现了它们的大多数操作选项，这让每一个Linux/Unix用户使用起来都非常自然。
###4.1 初始化
当客户端请求从一个地方复制文件到另外一个地方，传输便开始启动。文件操作与文件处理同时进行，并在初始化的不同阶段得到计算，而且允许目录单独遍历而不是将目录遍历和文件传输捆绑在一起，本地的文件操作直接使用递归遍历计算，而远端的文件操作使用`SFTP`协议的操作功能进行计算。表三展示了在不同场景下初始化一个递归式传输所花费的时间。可以看出，本地的花费的时间不多，但是在高延迟的`WAN`连接下，远端所花费的时间比较多，通过一个可选的辅助脚本调用`SSH`来实现在本地计算实现远端的初始化,可以极大的降低该时间花费。
操作通过`put()`函数递交给管理端，它给文件操作建立一个唯一的标识符，并将其同步备份，并在随后的操作中将标识符返回给客户端。当初始化完成，客户端在用户的周期性任务中插入一个接口以周期性检查文件的传输状态。当一个传输进程无法检测到，客户端便会自己周期性的启动该进程。因此，当客户端或者它所属的系统崩溃，传输任务最终还是会被重新启动。当管理端终止任务时，客户端会将周期性的任务删除。在没有周期性任务的系统中，会提供相类似的功能，着将在第五部分详述。
###4.2 多个文件传输
在初始化期间，通过不同的文件传输协议，通过`get()`函数，客户端的进程从管理端被派生来检索批量的文件操作。`Shift`支持各种传输协议。在`Perl`和`SSH`的基础上，`Shift`自身包含并可以使用`Perl`自身集成的相当于`cp`的命令，在远程拷贝时，`Shift`便使用类似于`SFTP`和`FISH`的协议。在可行的情况下，`Shift`会自动选择性能最好的协议。目前这些选择包括在本地传输时的`Mcp`，和远端传输的`BbFTP`和`GridFTP`以及远端传输和本地传输都能用的`Rsnyc`。
对每一个支持的传输协议，`Shift`都知道如何高效的传输一批文件，如何检测错误，以及错误是否能够恢复。`Shift`能够以同样的方式支持其它的命令行传输工具。根据预估性能顺序，传输时会动态的为每一批文件选择性能最高的传输方法。预估性能取决于每一批文件的大小。在传输之前，会进行一个小文件的传输测试，以保证最后的传输的可行性和正确性。不同工具的传输性能会在第五部分给出。
###4.3 端对端的完整性
为了检测可能在文件遍历时不同组件可能产生的坏点，`Shift`在传输成功时通过计算源端和目的端文件的哈希表了检测端对端的完整性。相匹配的哈希值确保文件在传输过程中没有发生错误。如果传输工具支持（如`Mcp`），`Shift`允许资源端的哈希计算成为传输工具计算的一部分。这样资源端从磁盘中读取数据到缓存区时，哈希计算可以重复使用，从而提高了传输的性能。与那些只验证从网络上传来的位字节的传输工具不同，`Shift`验证存储在目标盘里的位字节，以保证真实的端对端的验证。
传统上来说，不同的哈希值表明在文件传输的过程中文件的某些部分已经损坏。而`Shift`提供了一个哈希树来判断坏点所在的位置在哪个范围。这种方法的性能与标准的`md5sum`相当，并且兼容`Msum`，它是当在可行的情况下，`Shift`用来提升哈希计算性能的一种校验方法。当检测到坏点时，仅需要重新发送文件的坏点部分。`Mcp`和`GridFTP`本身支持这种部分文件传输，它们也内检在其它传输工具中以实现该功能，部分文件传输以类似的方式被支持。也就是说，当传输终端时，`Shift`会判断源端与目的端文件的不同，并据此继续传输，验证完整性的传输性能会在第五部分展示。图2展示了本地传输部分坏点出现，以及各种错误出现时，`Shift`的恢复机制。可以看出`Shift`能从不同场景中自动恢复。
##5 多主机并发传输
任何备用的客户端或远端的服务器必须给予初始的客户端或远端服务器访问权限。远端文件系统的等价性来源于部署的用户或组织通过周期性调用附带工具获取的信息。客户端在初始化过程中通过`mount`命令逐步的收集文件信息并将其传递给管理端来决定并行客户端的行为。在典型的集群环境下并行是最有效的，登陆用户将分布在相当的前段中，因此，随着时间的推移，客户端完整的环境情况会随着`Shift`的使用慢慢建立。
客户端的并行发生在`get()`函数的进程中，如果有足够的任务要做，管理端会寻找相当的主机来访问客户端的文件系统，这些文件系统的信息在初始化的过程中已经传递给管理端了。然后客户端将自己分成相同多的副本给这些主机通过`SSH`访问。如果基于主机的验证不被支持，当`SSH`代理与用户交互会话通常可用于验证时，所有的副本过通常会在第一次调用`get()`时出现。副本客户端立即将自己加入到计划任务中，并在通过`get()`和`put()`函数进行操作之前，与`SSH`会话断开联系。由于每台主机上的挂载点可能不同，路径会更具管理端提供的文件系统信息重写。远端主机此时也通过返回备用远端的路径进行并行处理。

